{"version":3,"sources":["components/AddTodoForm.js","components/TodoItem.js","utils/todosData.js","App.js","serviceWorker.js","index.js"],"names":["AddTodoItem","props","addTodo","useState","newTodoText","setNewTodoText","inputRef","useRef","className","htmlFor","ref","type","id","value","onChange","event","target","onClick","preventDefault","current","focus","disabled","length","icon","TodoItem","todo","handleChange","deleteTodo","editTodo","isEdit","setIsEdit","checked","completed","name","text","placeholder","newText","document","getElementById","prev","renameTodo","todosData","App","Todos","todos","setTodos","setId","newTodos","map","todoIndex","indexOf","splice","useEffect","allTodos","key","AddTodoForm","prevState","newTodo","Boolean","window","location","hostname","match","library","add","faPlus","faEdit","faSave","faTrash","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.275b43ff.chunk.js","sourcesContent":["import React, {useState, useRef} from \"react\"\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\nfunction AddTodoItem(props) {\r\n  const {addTodo} = props\r\n  const [newTodoText, setNewTodoText] = useState(\"\")\r\n  const inputRef = useRef(null)\r\n\r\n  function handleChange(event) {\r\n    setNewTodoText(event.target.value)\r\n  }\r\n\r\n  function handleClick(event) {\r\n    event.preventDefault()\r\n    addTodo(newTodoText)\r\n    inputRef.current.focus()\r\n    setNewTodoText(\"\")\r\n  }\r\n\r\n  return(\r\n    <form className=\"add-todo-form\">\r\n      <label className=\"add-todo-label\" htmlFor=\"new-todo\">Add a todo</label>\r\n      <input \r\n        className=\"add-todo-input\" \r\n        ref={inputRef} \r\n        type=\"text\" \r\n        id=\"new-todo\" \r\n        value={newTodoText} \r\n        onChange={handleChange} \r\n      />\r\n      <button \r\n        className=\"add-todo-button\" \r\n        onClick={handleClick} \r\n        disabled={newTodoText.length > 0 ? false : true}\r\n      >\r\n        <FontAwesomeIcon icon=\"plus\" />\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddTodoItem","import React, {useState} from \"react\"\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\nfunction TodoItem(props) {\r\n  const {todo, handleChange, deleteTodo, editTodo} = props\r\n  const [isEdit, setIsEdit] = useState(false)\r\n\r\n  function renameTodo() {\r\n    let newText = document.getElementById(\"newTodoText\").value\r\n    editTodo(todo.id, newText)\r\n    setIsEdit(prev => !prev)\r\n  }\r\n\r\n  return(\r\n    <div className=\"todo-item flex-container\">\r\n      <div className=\"todo-item-info\">\r\n        <input \r\n          className=\"todo-item-checkbox\" \r\n          type=\"checkbox\" \r\n          onChange={() => handleChange(todo.id)} \r\n          checked={todo.completed} \r\n          name={todo.text} \r\n          id={`todo-${todo.id}`} \r\n        />\r\n        {\r\n          isEdit ? \r\n            <input \r\n              className=\"todo-item-input\" \r\n              type=\"text\" \r\n              placeholder={todo.text} \r\n              id=\"newTodoText\" \r\n            /> :\r\n            <label \r\n              className={`todo-label ${todo.completed && \"completed\"}`}\r\n              htmlFor={`todo-${todo.id}`}\r\n            >\r\n              {todo.text}\r\n            </label>  \r\n        }\r\n      </div>\r\n\r\n      <div className=\"todo-item-buttons\">\r\n        <button onClick={() => isEdit ? renameTodo() : setIsEdit(prev => !prev)}>\r\n          {isEdit ? <FontAwesomeIcon icon=\"save\" /> : <FontAwesomeIcon icon=\"edit\" />}\r\n        </button>\r\n        <button onClick={() => deleteTodo(todo)}>\r\n          <FontAwesomeIcon icon=\"trash\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoItem","const todosData = [\r\n    {\r\n        id: 0,\r\n        text: \"Take out the trash\",\r\n        completed: true,\r\n    },\r\n    {\r\n        id: 1,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Mow lawn\",\r\n        completed: true,\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Catch up on Arrested Development\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\n\r\nimport AddTodoForm from \"./components/AddTodoForm\"\r\nimport TodoItem from \"./components/TodoItem\"\r\nimport Todos from \"./utils/todosData\"\r\n\r\nfunction App() {\r\n\r\n  const [todos, setTodos] = useState(Todos)\r\n  const [id, setId] = useState(todos.length)\r\n  // const isEmpty = todos.length > 0 ? false : true\r\n\r\n  function handleChange(id) {\r\n    const newTodos = todos.map(todo => {\r\n      if(todo.id === id) {\r\n        return {\r\n          ...todo,\r\n          completed: !todo.completed\r\n        }\r\n      } else {\r\n        return todo\r\n      }\r\n    })\r\n\r\n    setTodos(newTodos)\r\n  }\r\n\r\n  function deleteTodo(todo) {\r\n    const newTodos = [...todos]\r\n    const todoIndex = newTodos.indexOf(todo)\r\n    newTodos.splice(todoIndex, 1)\r\n    setTodos(newTodos)\r\n  }\r\n\r\n  function editTodo(id, newText) {\r\n    const newTodos = todos.map(todo => {\r\n      if(todo.id === id && newText.length > 0) {\r\n        return {\r\n          ...todo,\r\n          text: newText\r\n        }\r\n      } else {\r\n        return todo\r\n      }\r\n    })\r\n    \r\n    setTodos(newTodos)\r\n  }\r\n\r\n  function addTodo(newTodoText) {\r\n    setId(prevState => prevState + 1)\r\n  \r\n    const newTodo = {\r\n      id,\r\n      text: newTodoText,\r\n      completed: false\r\n    }\r\n\r\n    setTodos(prevState => [...prevState, newTodo])\r\n  }\r\n\r\n  useEffect(() => {\r\n    \r\n  })\r\n\r\n  // useEffect(() => {\r\n  //   setTodos([{id: 0, text: \"Add a todo\", completed: false}])\r\n  // }, [isEmpty])\r\n\r\n  const allTodos = todos.map(todo => (\r\n    <TodoItem \r\n      key={todo.id} \r\n      todo={todo} \r\n      handleChange={handleChange} \r\n      deleteTodo={deleteTodo}\r\n      editTodo={editTodo}\r\n    />\r\n  ))\r\n\r\n  return (\r\n    <div className=\"todo-list\">\r\n      <AddTodoForm addTodo={addTodo} />\r\n      {allTodos}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n/* Font awesome library initialization */\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faPlus, faEdit, faSave, faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faPlus, faEdit, faSave, faTrash)\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}