{"version":3,"sources":["components/TodoItem.js","utils/todosData.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","todo","handleChange","deleteTodo","editTodo","useState","isEdit","setIsEdit","className","type","onChange","id","checked","completed","name","text","placeholder","htmlFor","style","marginLeft","onClick","document","getElementById","value","prev","todosData","App","Todos","todos","setTodos","newTodos","map","todoIndex","indexOf","splice","newText","length","allTodos","key","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQA0BeA,MAxBf,SAAkBC,GAAQ,IACjBC,EAA4CD,EAA5CC,KAAMC,EAAsCF,EAAtCE,aAAcC,EAAwBH,EAAxBG,WAAYC,EAAYJ,EAAZI,SADhB,EAEKC,oBAAS,GAFd,mBAEhBC,EAFgB,KAERC,EAFQ,KASvB,OACE,yBAAKC,UAAU,aACb,2BAAOC,KAAK,WAAWC,SAAU,kBAAMR,EAAaD,EAAKU,KAAKC,QAASX,EAAKY,UAAWC,KAAMb,EAAKc,KAAMJ,GAAE,eAAUV,EAAKU,MAEvHL,EACE,2BAAOG,KAAK,OAAOO,YAAaf,EAAKc,KAAMJ,GAAG,gBAC9C,2BAAOM,QAAO,eAAUhB,EAAKU,IAAMH,UAAS,qBAAgBP,EAAKY,WAAa,cAAgBZ,EAAKc,MAGvG,4BAAQG,MAAO,CAACC,WAAY,QAASC,QAAS,kBAAMd,GAbtDF,EAASH,EAAKU,GAAIU,SAASC,eAAe,eAAeC,YACzDhB,GAAU,SAAAiB,GAAI,OAAKA,MAY2DjB,GAAU,SAAAiB,GAAI,OAAKA,OAAQlB,EAAS,IAAM,QACtH,4BAAQY,MAAO,CAACC,WAAW,QAASC,QAAS,kBAAMjB,EAAWF,KAA9D,OCOSwB,EA5BG,CACd,CACId,GAAI,EACJI,KAAM,qBACNF,WAAW,GAEf,CACIF,GAAI,EACJI,KAAM,mBACNF,WAAW,GAEf,CACIF,GAAI,EACJI,KAAM,mBACNF,WAAW,GAEf,CACIF,GAAI,EACJI,KAAM,WACNF,WAAW,GAEf,CACIF,GAAI,EACJI,KAAM,mCACNF,WAAW,ICuCJa,MAzDf,WAAgB,IAAD,EACarB,mBAASsB,GADtB,mBACNC,EADM,KACCC,EADD,KAGb,SAAS3B,EAAaS,GACpB,IAAMmB,EAAWF,EAAMG,KAAI,SAAA9B,GACzB,OAAGA,EAAKU,KAAOA,EACN,eACFV,EADL,CAEEY,WAAYZ,EAAKY,YAGZZ,KAIX4B,EAASC,GAGX,SAAS3B,EAAWF,GAClB,IAAM6B,EAAQ,YAAOF,GACfI,EAAYF,EAASG,QAAQhC,GACnC6B,EAASI,OAAOF,EAAW,GAC3BH,EAASC,GAGX,SAAS1B,EAASO,EAAIwB,GACpB,IAAML,EAAWF,EAAMG,KAAI,SAAA9B,GACzB,OAAGA,EAAKU,KAAOA,GAAMwB,EAAQC,OAAS,EAC7B,eACFnC,EADL,CAEEc,KAAMoB,IAGDlC,KAIX4B,EAASC,GAGX,IAAMO,EAAWT,EAAMG,KAAI,SAAA9B,GAAI,OAC7B,kBAAC,EAAD,CACEqC,IAAKrC,EAAKU,GACVV,KAAMA,EACNC,aAAcA,EACdC,WAAYA,EACZC,SAAUA,OAId,OACE,yBAAKI,UAAU,aACZ6B,IC9CaE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASC,eAAe,SD6H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.de2194c8.chunk.js","sourcesContent":["import React, {useState} from \"react\"\r\n\r\nfunction TodoItem(props) {\r\n  const {todo, handleChange, deleteTodo, editTodo} = props\r\n  const [isEdit, setIsEdit] = useState(false)\r\n\r\n  function renameTodo() {\r\n    editTodo(todo.id, document.getElementById(\"newTodoText\").value)\r\n    setIsEdit(prev => !prev)\r\n  }\r\n\r\n  return(\r\n    <div className=\"todo-item\">\r\n      <input type=\"checkbox\" onChange={() => handleChange(todo.id)} checked={todo.completed} name={todo.text} id={`todo-${todo.id}`} />\r\n      {\r\n        isEdit ? \r\n          <input type=\"text\" placeholder={todo.text} id=\"newTodoText\" /> :\r\n          <label htmlFor={`todo-${todo.id}`} className={`todo-label ${todo.completed && \"completed\"}`}>{todo.text}</label>  \r\n      }\r\n\r\n      <button style={{marginLeft: \"20px\"}} onClick={() => isEdit ? renameTodo() : setIsEdit(prev => !prev)}>{isEdit ? \"v\" : \"Â°\"}</button>\r\n      <button style={{marginLeft:\"20px\"}} onClick={() => deleteTodo(todo)}>x</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoItem","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true,\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Mow lawn\",\r\n        completed: true,\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Arrested Development\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","import React, {useState} from 'react';\r\nimport './App.css';\r\n\r\nimport TodoItem from \"./components/TodoItem\"\r\nimport Todos from \"./utils/todosData\"\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState(Todos)\r\n  \r\n  function handleChange(id) {\r\n    const newTodos = todos.map(todo => {\r\n      if(todo.id === id) {\r\n        return {\r\n          ...todo,\r\n          completed: !todo.completed\r\n        }\r\n      } else {\r\n        return todo\r\n      }\r\n    })\r\n\r\n    setTodos(newTodos)\r\n  }\r\n\r\n  function deleteTodo(todo) {\r\n    const newTodos = [...todos]\r\n    const todoIndex = newTodos.indexOf(todo)\r\n    newTodos.splice(todoIndex, 1)\r\n    setTodos(newTodos)\r\n  }\r\n\r\n  function editTodo(id, newText) {\r\n    const newTodos = todos.map(todo => {\r\n      if(todo.id === id && newText.length > 0) {\r\n        return {\r\n          ...todo,\r\n          text: newText\r\n        }\r\n      } else {\r\n        return todo\r\n      }\r\n    })\r\n    \r\n    setTodos(newTodos)\r\n  }\r\n\r\n  const allTodos = todos.map(todo => (\r\n    <TodoItem \r\n      key={todo.id} \r\n      todo={todo} \r\n      handleChange={handleChange} \r\n      deleteTodo={deleteTodo}\r\n      editTodo={editTodo}\r\n    />\r\n  ))\r\n\r\n  return (\r\n    <div className=\"todo-list\">\r\n      {allTodos}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}